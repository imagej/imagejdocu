**Below are two macros for automated analysis of scratch wound assays commonly used in cell migration research.** 
Each calculates the size of the wound, and exports result files and image files showing the fitting of the scratch area. The macros will work on single images or stacks. Please read the instructions in the header of each macro.

The first macro uses an edge-detection/thresholding method and is usually the more accurate.
The second macro uses a background subtraction/thresholding method and may work better for some images.


**Macro 1: Edge-detection/thresholding method**

&lt;code java&gt;
//This macro was designed to measure the size of the scratch wound in a wound scratch assay. It uses an edge-detection and thresholding technique.
// It will batch process all images in a directory. Images captured by time-lapse should be compiled into stacks using a tool similar to &quot;Metamorph nd &amp; ROI files importer (nd stack builder)&quot; by Fabrice P. Cordelières
//Images to be analyzed should be placed in one directory (Source Directory)
//A second directory should be created to save results files and images (Destination Directory)
//Setting correct Lower and Upper thresholds is important to obtain a good result.

// Developed by: Stuart J Gallagher; William J Ashby; Fabrice P Cordeliéres; Lionel Larue.
//Institut Curie; Vanderbilt University.

//This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.





dir1 = getDirectory(&quot;Choose Source Directory &quot;); 
  dir2 = getDirectory(&quot;Choose Destination Directory&quot;); 
  list = getFileList(dir1); 

x = getNumber(&quot;Input lower threshold&quot;, 0);
y = getNumber(&quot;Input upper threshold&quot;, 80);
//This generates a message box to generate the lower (x) and upper (y) bounds for thresholding later on. 

setBatchMode(true);    //use this to save time by not displaying images 

 for (i=0; i&lt;list.length; i++){ 
      showProgress(i+1, list.length); 
    open(dir1+list[i]); 

    run(&quot;8-bit&quot;);   //my experience is that I get better results in 8-bit. 
    run(&quot;Duplicate...&quot;, &quot;title=copy duplicate&quot;); 
selectWindow(list[i]); 
run(&quot;Sharpen&quot;, &quot;stack&quot;);  //this step really helps a lot for thin cells with thin lamellopodia 
run(&quot;Find Edges&quot;, &quot;stack&quot;); 

setThreshold(x,y); 

//very important to get an appropriate threshold 

run(&quot;Convert to Mask&quot;, &quot; &quot;); 
run(&quot;Analyze Particles...&quot;, &quot;size=12000-Infinity circularity=0.00-1.00 show=Outlines summarize stack&quot;); 
selectWindow(&quot;Summary of &quot;+list[i]); 
saveAs(&quot;Text&quot;, dir2+list[i]); 
run(&quot;Close&quot;); //This saves and closes the Analyze Particles results

selectWindow(&quot;Drawing of &quot;+list[i]); 
run(&quot;Red&quot;); 
run(&quot;Invert LUT&quot;); 
run(&quot;RGB Color&quot;);
selectWindow(&quot;copy&quot;); 
run(&quot;RGB Color&quot;); 
imageCalculator(&quot;Add stack&quot;, &quot;copy&quot;, &quot;Drawing of &quot;+list[i]); 
run(&quot;Size...&quot;, &quot;width=600 constrain interpolate&quot;); 
saveAs(&quot;Tiff&quot;, dir2+&quot;Drawing &quot;+list[i]); 

//The above makes and saves an file containing the original image overlaid with the outline of the wound that was fitted by the program.


close(); 
close(); 
close(); 
 } 
&lt;/code&gt;



**Macro 2: Background subtraction/thresholding method**

&lt;code java&gt;
//This macro was designed to measure the size of the scratch wound in a wound scratch assay. It uses a back-ground subtraction technique.
// It will batch process all images in a directory. Images captured by time-lapse should be compiled into stacks using a tool similar to &quot;Metamorph nd &amp; ROI files importer (nd stack builder)&quot; by Fabrice P. Cordelières
//Images to be analyzed should be placed in one directory (Source Directory)
//A second directory should be created to save results files and images (Destination Directory)
//Setting correct Lower and Upper thresholds is important to obtain a good result.

// Creator: Stuart J Gallagher; William J Ashby; Fabrice P Cordeliéres; Lionel Larue.
//Institut Curie; Vanderbilt University.


//This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see http://www.gnu.org/licenses/.






dir1 = getDirectory(&quot;Choose Source Directory &quot;); 
  dir2 = getDirectory(&quot;Choose Destination Directory&quot;); 
  list = getFileList(dir1); 

x = getNumber(&quot;Input lower threshold&quot;, 0);
y = getNumber(&quot;Input upper threshold&quot;, 80);
//This generates a message box to generate the lower (x) and upper (y) bounds for thresholding later on. 

setBatchMode(true);    //use this to save time by not displaying images 

 for (i=0; i&lt;list.length; i++){ 
      showProgress(i+1, list.length); 
    open(dir1+list[i]); 

    run(&quot;8-bit&quot;);   //my experience is that I get better results in 8-bit. 
    run(&quot;Duplicate...&quot;, &quot;title=copy duplicate&quot;); 
selectWindow(list[i]); 

run(&quot;Subtract Background...&quot;, &quot;rolling=30 light stack&quot;);
run(&quot;Enhance Contrast&quot;, &quot;saturated=5&quot;);
run(&quot;Invert&quot;, &quot;stack&quot;);

setThreshold(x,y);


run(&quot;Convert to Mask&quot;, &quot; &quot;); 
run(&quot;Analyze Particles...&quot;, &quot;size=12000-Infinity circularity=0.00-1.00 show=Outlines summarize stack&quot;); 
selectWindow(&quot;Summary of &quot;+list[i]); 
saveAs(&quot;Text&quot;, dir2+list[i]); 
run(&quot;Close&quot;);  //This saves and closes the Analyze Particles results

selectWindow(&quot;Drawing of &quot;+list[i]); 
run(&quot;Red&quot;); 
run(&quot;Invert LUT&quot;); 
run(&quot;RGB Color&quot;);
selectWindow(&quot;copy&quot;); 
run(&quot;RGB Color&quot;); 
imageCalculator(&quot;Add stack&quot;, &quot;copy&quot;, &quot;Drawing of &quot;+list[i]); 
run(&quot;Size...&quot;, &quot;width=600 constrain interpolate&quot;); 
saveAs(&quot;Tiff&quot;, dir2+&quot;Drawing &quot;+list[i]); 

//The above makes and saves an file containing the original image overlaid with the outline of the wound that was fitted by the program.


close(); 
close(); 
close(); 
 } 
&lt;/code&gt;
